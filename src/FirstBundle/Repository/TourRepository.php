<?php

namespace FirstBundle\Repository;

use Doctrine\ORM\EntityRepository;

/**
 * TourRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class TourRepository extends EntityRepository
{
    
    //fonction dédiée à créer un tour pour tous les utilisateurs, pour un workset donné
    public function createTour($num, $workset_id, $user_id){
        
        $em = $this->getEntityManager();
        
        $qb_user = $em->createQueryBuilder();
        
        //on récupère la liste des utilisateurs
        $userlist = $em->getRepository('FirstBundle:User')
                        ->findBy(array('id'  => $user_id));
        
        foreach($userlist as $user){
            //pour chacun, on délègue l'opération à InsertTour
            $this->insertTour($num, $user->getId(), $workset_id);
        }
        
        return true;
    }
    
    public function getAllByNumber($workset_id, $user_id){
        
        $outputData = array();
        
        $tours = $this->getAllToursXItems($workset_id, $user_id);
        
        
        foreach($tours as $tour){
            
            $tourXitem = new \stdClass();
            $tourXitem->item_id     = $tour['item_id'];
            $tourXitem->field_id    = $tour['field_id'];
            $tourXitem->done        = $tour['done'];
            
            $outputData[$tour['iteration']][$tour['item_id']] = $tourXitem;
            
        }
        
        return $outputData;
        
        
    }
    
    //renvoie une liste de données sur le remplissage tourXitem pour l'utilisateur & le workset passés en paramètres
    private function getAllToursXItems($workset_id, $user_id){
        
        $qb = $this ->getEntityManager()
                    ->getConnection()
                    ->createQueryBuilder();
        
        $qb ->select('iteration, item_id, field_id, done')
            ->from('tourXitem')
            ->where('user_id = ' . $user_id)
            ->andWhere('workset_id = ' . $workset_id)
            ->orderBy('field_id, item_id, iteration', 'ASC');
        
        return $qb  ->execute()
                    ->fetchAll();
        
    }
    
    //insère un tour pour un utilisateur donné & un workset donné
    private function insertTour($iteration, $user_id, $workset_id){
        
        $cnx= $this    ->getEntityManager()
                        ->getConnection();
        
        //on insère une entrée dans la table Tour (avec le user_id)
        $cnx    ->insert('tour', array(
                    'user_id'       => $user_id,
                    'workset_id'    => $workset_id,
                    'iteration'     => $iteration,
                ));
        
        //on récupère l'ID inséré
        $id = $cnx->lastInsertId();
        
        //on délègue la suite à INSERTTOURLINKS
        $this->insertTourLinks($id, $workset_id, $user_id, $iteration);

    }
    
    //insère les liens (link_tour_field & link_tour_item) pour un tour en BDD, pour le workset donné
    private function insertTourLinks($tour_id, $workset_id, $user_id, $iteration){
        
        $em = $this->getEntityManager();
        
        //on récupère la liste des fields du workset concerné
        $fields = $em   ->getRepository('FirstBundle:Field')
                        ->fetchAllWithItemsByWorksetId($workset_id);
        
        foreach($fields as $field) {
            //pour chacun, on délègue la suite a insertLinks()
            $this->insertLinks($field, $tour_id, $user_id, $iteration);
        }
    }
    
    //insère le lien entre un tour et un field en BDD
    private function insertLinks($field, $tour_id, $user_id, $iteration){
        
        $cnx = $this->getEntityManager()->getConnection();
        
        //on insère le lien entre tour et field
        $cnx  ->insert('link_tour_field', array(
                    'tour_id'   => $tour_id,
                    'field_id'  => $field->getId(),
                    'user_id'   => $user_id,
                    'done'      => 0, //a la création les tours ne sont pas cochés
                ));
        
        //on insère un lien entre tour et item pour chaque itzem
        foreach($field->getItems() as $item){
            
            //on insère la ligne dans outeXitem, bindée au tour id, item_id, user_id
            $cnx    ->insert('link_tour_item', array(
                        'tour_id'   => $tour_id,
                        'item_id'   => $item->getId(),
                        'user_id'   => $user_id,
                        'done'      => 0, //a la création les tours ne sont pas cochés
                    ));       
            
            //on insere dans kanban_steps, bindée sur item_id, user_id, iteration
            $cnx    ->insert('kanban_item_step', array(
                        'item_id'   => $item->getId(),
                        'iteration' => $iteration,
                        'user_id'   => $user_id,
                        'step'      => 0, //a la création les kanban_items sont au step 0
                    ));              
        }
    }
    
    public function getLastTour($workset_id, $user_id){
        
        
        $qb = $this ->getEntityManager()
                    ->getConnection()
                    ->createQueryBuilder();

        $query = $qb->select('MAX(iteration) as last')
                    ->from('tour')
                    ->where('user_id = :u')
                    ->andWhere('workset_id = :w')
                    ->setParameter('u', $user_id)
                    ->setParameter('w', $workset_id);
        
        $result = $query->execute()->fetch();
        
        return $result['last'];
                
    }
}
