<?php

namespace FirstBundle\Repository;

use Doctrine\ORM\EntityRepository;

use FirstBundle\Entity\Workset;

/**
 * WorksetRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class KanbanRepository extends EntityRepository
{
    
    //on récupère la liste des items, pour populer le kanban de cette matière pour cette itération (avec les num de step)
    public function fetchAllItemsByFieldAndIteration($field_id, $iteration, $user_id){
        
        
        $qb = $this ->getEntityManager()
                    ->getConnection()
                    ->createQueryBuilder();
        
        $query = $qb->select('t.item_id, i.name as item_name, t.iteration, t.user_id, k.step')
                    ->from('tourXitem', 't')
                    ->where('t.field_id = :f_id')
                    ->andWhere('t.iteration = :it')
                    ->andWhere(' t.user_id = :u_id')
                    ->leftJoin('t','kanban_item_step', 'k', 'k.item_id = t.item_id AND k.user_id = t.user_id AND k.iteration = t.iteration')
                    ->leftJoin('t','item', 'i', 't.item_id = i.id')
                    ->setParameter('f_id', $field_id)
                    ->setParameter('it', $iteration)
                    ->setParameter('u_id', $user_id);
        
//        dump($query->getSQL());die;
        
        $result = $qb   ->execute()
                        ->fetchAll();
        
        return $result;
        
    }
    
    public function fetchOneWithFields($id){

        $qb = $this ->createQueryBuilder('w')
                    ->leftJoin('w.fields', 'f')
                    ->where('w.id = ' . $id)
                    ->addSelect('f');
        
        return $qb->getQuery()->getResult()[0];
     
    }
    
    public function fetchAllWithFields(){

        $qb = $this ->createQueryBuilder('w')
                    ->leftJoin('w.fields', 'f')
                    ->addSelect('f');
        
        return $qb->getQuery()->getResult();
     
    }
    
    
    public function getItemStatus($workset_id, $user_id){
        
        $outputData = array();
        
        $fieldRepository = $this->getEntityManager()->getRepository('FirstBundle:Field');
        $itemRepository = $this->getEntityManager()->getRepository('FirstBundle:Item');        
        
        $fields = $fieldRepository->fetchAllByWorksetId($workset_id);
        
        foreach($fields as $field){
            foreach($field->getItems() as $item){
                $outputData[$item->getId()]['mikbook'] = $itemRepository->isMikBooked($item->getId(), $user_id);
                $outputData[$item->getId()]['done'] = $itemRepository->isDone($item->getId(), $user_id);
            }
        }
        
        return $outputData;        
    }
   
 
}


//        
//    $qb = $this->createQueryBuilder('a');
//
//    // On fait une jointure avec l'entité Categorie, avec pour alias « c »
//    $qb ->join('a.categories', 'c')
//        ->where($qb->expr()->in('c.nom', $nom_categories)); // Puis on filtre sur le nom des catégories à l'aide d'un IN
//
//    // Enfin, on retourne le résultat
//    return $qb->getQuery()
//              ->getResult();   
