<?php

namespace FirstBundle\Repository;

use Doctrine\ORM\EntityRepository;

use FirstBundle\Entity\Workset;

/**
 * WorksetRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class WorksetRepository extends EntityRepository
{
    
    public function fetchOneWithFields($id){

        $qb = $this ->createQueryBuilder('w')
                    ->leftJoin('w.fields', 'f')
                    ->where('w.id = ' . $id)
                    ->addSelect('f');
        
        return $qb->getQuery()->getResult()[0];
     
    }
    
    public function fetchAllWithFields(){

        $qb = $this ->createQueryBuilder('w')
                    ->leftJoin('w.fields', 'f')
                    ->addSelect('f');
        
        return $qb->getQuery()->getResult();
     
    }
    
    public function getAllItemsDataByWorksetId($id, $user_id){
        
//        $em = $this->getEntityManager();
//        
//        $conn = $em->getConnection();
//        
//        $qb = $conn->createQueryBuilder();
//        
//        $qb     ->select('id')
//                ->from('user');
//        
//        $statement = $qb->execute();
//        
//        $result = $statement->fetchAll();
        
        
        $fieldRepository = $this->getEntityManager()->getRepository('FirstBundle:Field');
        $itemRepository = $this->getEntityManager()->getRepository('FirstBundle:Item');        
        
        $outputData = array();

        
        $fields = $fieldRepository->fetchAllByWorksetId($id);
        
        foreach($fields as $field){
            
            $items = $itemRepository->fetchAllByFieldId($field->getId());
            
            $outputData[$field->getId()] = array(
                'field'             => $field,
                'nb_tours_complete' => $this->getNbToursComplete($field->getId(), $user_id),
                'items'             => $items,
            );
        }
        
//       dump($outputData); die;
        
        return $outputData;
    }
    
    public function getItemStatus($workset_id, $user_id){
        
        $outputData = array();
        
        $fieldRepository = $this->getEntityManager()->getRepository('FirstBundle:Field');
        $itemRepository = $this->getEntityManager()->getRepository('FirstBundle:Item');        
        
        $fields = $fieldRepository->fetchAllByWorksetId($workset_id);
        
        foreach($fields as $field){
            foreach($field->getItems() as $item){
                $outputData[$item->getId()]['mikbook'] = $itemRepository->isMikBooked($item->getId(), $user_id);
                $outputData[$item->getId()]['done'] = $itemRepository->isDone($item->getId(), $user_id);
            }
        }
        
        return $outputData;        
    }
   
    private function getNbToursComplete($field_id, $user_id){
        
        $qb = $this ->getEntityManager()
                    ->getConnection()
                    ->createQueryBuilder();
        
        $query = $qb->select('MAX(iteration) as nb')
                    ->from('view_link_user_field')
                    ->where('field_id = :f_id')
                    ->andWhere('done = 1 ')
                    ->andWhere(' user_id = :u_id')
                    ->setParameter('f_id', $field_id)
                    ->setParameter('u_id', $user_id);
        
        $result = $qb   ->execute()
                        ->fetch();
        
        return ($result['nb'] !== null) ? $result['nb'] : 0;
    }
    
    private function getWorksetFields($id){
        
        $workset = $this->fetchOneWithFields($id);
        
        return $workset->getFields();
        
        
    }
}


//        
//    $qb = $this->createQueryBuilder('a');
//
//    // On fait une jointure avec l'entité Categorie, avec pour alias « c »
//    $qb ->join('a.categories', 'c')
//        ->where($qb->expr()->in('c.nom', $nom_categories)); // Puis on filtre sur le nom des catégories à l'aide d'un IN
//
//    // Enfin, on retourne le résultat
//    return $qb->getQuery()
//              ->getResult();   
